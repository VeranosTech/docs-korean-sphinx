# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.8.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-18 15:36+0900\n"
"PO-Revision-Date: 2018-12-24 11:34+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ko_KR\n"
"X-Generator: Poedit 2.2\n"

#: ../../usage/restructuredtext/domains.rst:5
msgid "Domains"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:9
msgid ""
"Originally, Sphinx was conceived for a single project, the documentation of "
"the Python language.  Shortly afterwards, it was made available for everyone "
"as a documentation tool, but the documentation of Python modules remained "
"deeply built in -- the most fundamental directives, like ``function``, were "
"designed for Python objects.  Since Sphinx has become somewhat popular, "
"interest developed in using it for many different purposes: C/C++ projects, "
"JavaScript, or even reStructuredText markup (like in this documentation)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:17
msgid ""
"While this was always possible, it is now much easier to easily support "
"documentation of projects using different programming languages or even ones "
"not supported by the main Sphinx distribution, by providing a **domain** for "
"every such purpose."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:22
msgid ""
"A domain is a collection of markup (reStructuredText :term:`directive`\\ s "
"and :term:`role`\\ s) to describe and link to :term:`object`\\ s belonging "
"together, e.g. elements of a programming language.  Directive and role names "
"in a domain have names like ``domain:name``, e.g. ``py:function``.  Domains "
"can also provide custom indices (like the Python Module Index)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:28
msgid ""
"Having domains means that there are no naming problems when one set of "
"documentation wants to refer to e.g. C++ and Python classes.  It also means "
"that extensions that support the documentation of whole new languages are "
"much easier to write."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:33
msgid ""
"This section describes what the domains that are included with Sphinx "
"provide. The domain API is documented as well, in the section :ref:`domain-"
"api`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:40
msgid "Basic Markup"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:42
msgid ""
"Most domains provide a number of :dfn:`object description directives`, used "
"to describe specific objects provided by modules.  Each directive requires "
"one or more signatures to provide basic information about what is being "
"described, and the content should be the description.  The basic version "
"makes entries in the general index; if no index entry is desired, you can "
"give the directive option flag ``:noindex:``.  An example using a Python "
"domain directive::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:54
msgid ""
"This describes the two Python functions ``spam`` and ``ham``.  (Note that "
"when signatures become too long, you can break them if you add a backslash to "
"lines that are continued in the next line.  Example::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:62
msgid "(This example also shows how to use the ``:noindex:`` flag.)"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:64
msgid ""
"The domains also provide roles that link back to these object descriptions. "
"For example, to link to one of the functions described in the example above, "
"you could say ::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:70
msgid ""
"As you can see, both directive and role names contain the domain name and the "
"directive name."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:74
msgid "Default Domain"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:75
msgid ""
"For documentation describing objects from solely one domain, authors will not "
"have to state again its name at each directive, role, etc... after having "
"specified a default. This can be done either via the config value :confval:"
"`primary_domain` or via this directive:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:82
msgid ""
"Select a new default domain.  While the :confval:`primary_domain` selects a "
"global default, this only has an effect within the same file."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:85
msgid ""
"If no other default is selected, the Python domain (named ``py``) is the "
"default one, mostly for compatibility with documentation written for older "
"versions of Sphinx."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:89
msgid ""
"Directives and roles that belong to the default domain can be mentioned "
"without giving the domain name, i.e. ::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:99
msgid "Cross-referencing syntax"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:101
msgid ""
"For cross-reference roles provided by domains, the same facilities exist as "
"for general cross-references.  See :ref:`xref-syntax`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:104
msgid "In short:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:106
msgid ""
"You may supply an explicit title and reference target: ``:role:`title "
"<target>``` will refer to *target*, but the link text will be *title*."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:109
msgid ""
"If you prefix the content with ``!``, no reference/hyperlink will be created."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:111
msgid ""
"If you prefix the content with ``~``, the link text will only be the last "
"component of the target.  For example, ``:py:meth:`~Queue.Queue.get``` will "
"refer to ``Queue.Queue.get`` but only display ``get`` as the link text."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:117
msgid "The Python Domain"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:119
msgid ""
"The Python domain (name **py**) provides the following directives for module "
"declarations:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:124
msgid ""
"This directive marks the beginning of the description of a module (or package "
"submodule, in which case the name should be fully qualified, including the "
"package name).  It does not create content (like e.g. :rst:dir:`py:class` "
"does)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:129
msgid "This directive will also cause an entry in the global module index."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:131
msgid ""
"The ``platform`` option, if present, is a comma-separated list of the "
"platforms on which the module is available (if it is available on all "
"platforms, the option should be omitted).  The keys are short identifiers; "
"examples that are in use include \"IRIX\", \"Mac\", \"Windows\", and \"Unix"
"\".  It is important to use a key which has already been used when applicable."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:137
msgid ""
"The ``synopsis`` option should consist of one sentence describing the "
"module's purpose -- it is currently only used in the Global Module Index."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:140
msgid ""
"The ``deprecated`` option can be given (with no value) to mark a module as "
"deprecated; it will be designated as such in various locations then."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:145
msgid ""
"This directive tells Sphinx that the classes, functions etc. documented from "
"here are in the given module (like :rst:dir:`py:module`), but it will not "
"create index entries, an entry in the Global Module Index, or a link target "
"for :rst:role:`py:mod`.  This is helpful in situations where documentation "
"for things in a module is spread over multiple files or sections -- one "
"location has the :rst:dir:`py:module` directive, the others only :rst:dir:`py:"
"currentmodule`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:153
msgid "The following directives are provided for module and class contents:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:157
msgid ""
"Describes a module-level function.  The signature should include the "
"parameters as given in the Python function definition, see :ref:`signatures`. "
"For example::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:163
msgid "For methods you should use :rst:dir:`py:method`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:165
msgid ""
"The description normally includes information about the parameters required "
"and how they are used (especially whether mutable objects passed as "
"parameters are modified), side effects, and possible exceptions."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:169
msgid ""
"This information can (in any ``py`` directive) optionally be given in a "
"structured form, see :ref:`info-field-lists`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:174
msgid ""
"Describes global data in a module, including both variables and values used "
"as \"defined constants.\"  Class and object attributes are not documented "
"using this environment."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:180
msgid ""
"Describes an exception class.  The signature can, but need not include "
"parentheses with constructor arguments."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:186
msgid ""
"Describes a class.  The signature can optionally include parentheses with "
"parameters which will be shown as the constructor arguments.  See also :ref:"
"`signatures`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:190
msgid ""
"Methods and attributes belonging to the class should be placed in this "
"directive's body.  If they are placed outside, the supplied name should "
"contain the class name so that cross-references still work.  Example::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:204
msgid "The first way is the preferred one."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:208
msgid ""
"Describes an object data attribute.  The description should include "
"information about the type of the data to be expected and whether it may be "
"changed directly."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:214
msgid ""
"Describes an object method.  The parameters should not include the ``self`` "
"parameter.  The description should include similar information to that "
"described for ``function``.  See also :ref:`signatures` and :ref:`info-field-"
"lists`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:221
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a static method."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:227
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a class method."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:234
msgid ""
"Describes a decorator function.  The signature should represent the usage as "
"a decorator.  For example, given the functions"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:249
msgid "the descriptions should look like this::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:259
msgid "(as opposed to ``.. py:decorator:: removename(func)``.)"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:261
msgid ""
"There is no ``py:deco`` role to link to a decorator that is marked up with "
"this directive; rather, use the :rst:role:`py:func` role."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:267
msgid "Same as :rst:dir:`py:decorator`, but for decorators that are methods."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:269
msgid "Refer to a decorator method using the :rst:role:`py:meth` role."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:274
msgid "Python Signatures"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:276
msgid ""
"Signatures of functions, methods and class constructors can be given like "
"they would be written in Python."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:279
msgid ""
"Default values for optional arguments can be given (but if they contain "
"commas, they will confuse the signature parser).  Python 3-style argument "
"annotations can also be given as well as return type annotations::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:285
msgid ""
"For functions with optional parameters that don't have default values "
"(typically functions implemented in C extension modules without keyword "
"argument support), you can use brackets to specify the optional parts:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:291
msgid "It is customary to put the opening bracket before the comma."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:296
#: ../../usage/restructuredtext/domains.rst:966
msgid "Info field lists"
msgstr "인포 필드 리스트(info field list)"

#: ../../usage/restructuredtext/domains.rst:300
msgid ""
"Inside Python object description directives, reST field lists with these "
"fields are recognized and formatted nicely:"
msgstr ""
"파이썬 객체 설명 부분에 아래 항목들을 포함할 경우 reST 항목들의 리스트가 적절"
"한 형식으로 인식된다:"

#: ../../usage/restructuredtext/domains.rst:303
msgid ""
"``param``, ``parameter``, ``arg``, ``argument``, ``key``, ``keyword``: "
"Description of a parameter."
msgstr ""
"``param``, ``parameter``, ``arg``, ``argument``, ``key``, ``keyword``: 매개 변"
"수에 대한 설명."

#: ../../usage/restructuredtext/domains.rst:305
msgid "``type``: Type of a parameter.  Creates a link if possible."
msgstr "``type``: 매개 변수의 속성. 가능하다면 링크를 생성할 것."

#: ../../usage/restructuredtext/domains.rst:306
msgid ""
"``raises``, ``raise``, ``except``, ``exception``: That (and when) a specific "
"exception is raised."
msgstr ""
"``raises``, ``raise``, ``except``, ``exception``: 특정 예외가 일어나는 경우와 "
"예외에 대한 설명."

#: ../../usage/restructuredtext/domains.rst:308
msgid "``var``, ``ivar``, ``cvar``: Description of a variable."
msgstr "``var``, ``ivar``, ``cvar``: 변수에 대한 설명."

#: ../../usage/restructuredtext/domains.rst:309
msgid "``vartype``: Type of a variable.  Creates a link if possible."
msgstr "``vartype``: 변수의 속성. 가능하다면 링크를 생성할 것."

#: ../../usage/restructuredtext/domains.rst:310
msgid "``returns``, ``return``: Description of the return value."
msgstr "``returns``, ``return``: 결과값에 대한 설명."

#: ../../usage/restructuredtext/domains.rst:311
msgid "``rtype``: Return type.  Creates a link if possible."
msgstr "``rtype``: 결과값의 속성. 가능하다면 링크를 생성할 것."

#: ../../usage/restructuredtext/domains.rst:315
msgid ""
"In current release, all ``var``, ``ivar`` and ``cvar`` are represented as "
"\"Variable\".  There is no difference at all."
msgstr ""
"현재의 배포판에서는 ``var``, ``ivar``, 그리고 ``cvar``\ 는 모두 변수를 지칭하며 "
"어느 것을 사용해도 차이가 없다."

#: ../../usage/restructuredtext/domains.rst:318
msgid ""
"The field names must consist of one of these keywords and an argument (except "
"for ``returns`` and ``rtype``, which do not need an argument).  This is best "
"explained by an example::"
msgstr ""
"인수가 필요없는 ``returns``\ 와 ``rtype``\ 을 제외한 모든 항목의 이름들은 위의 키"
"워드 중 하나와 인수로 구성되어야 한다. 다음은 사용 예시이다:"

#: ../../usage/restructuredtext/domains.rst:336
msgid "This will render like this:"
msgstr "위의 예제는 다음과 같은 형식으로 변환된다:"

#: ../../usage/restructuredtext/domains.rst:341
msgid "Send a message to a recipient"
msgstr ""

#: ../../usage/restructuredtext/domains.rst
msgid "Parameters"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:343
msgid "The person sending the message"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:344
msgid "The recipient of the message"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:345
msgid "The body of the message"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:346
msgid "The priority of the message, can be a number 1-5"
msgstr ""

#: ../../usage/restructuredtext/domains.rst
msgid "Returns"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:348
msgid "the message id"
msgstr ""

#: ../../usage/restructuredtext/domains.rst
msgid "Return type"
msgstr ""

#: ../../usage/restructuredtext/domains.rst
msgid "Raises"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:350
msgid "if the message_body exceeds 160 characters"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:351
msgid "if the message_body is not a basestring"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:353
msgid ""
"It is also possible to combine parameter type and description, if the type is "
"a single word, like this::"
msgstr ""
"가능한 형식이 하나일 경우 매개 변수의 형식과 설명을 다음과 같이 합쳐서 사용할 "
"수 있다."

#: ../../usage/restructuredtext/domains.rst:360
msgid ""
"Container types such as lists and dictionaries can be linked automatically "
"using the following syntax::"
msgstr ""
"리스트와 딕셔너리와 같은 컨테이너 속성들을 이용할 때 아래와 같은 구문을 이용하"
"면 자동적으로 링크가 생성된다::"

#: ../../usage/restructuredtext/domains.rst:370
msgid ""
"Multiple types in a type field will be linked automatically if separated by "
"the word \"or\"::"
msgstr ""
"속성 항목에 여러 개의 속성을 입력해야할 경우 \"or\"을 이용하여 각각의 속성을 "
"나누어주면 자동적으로 링크가 생성된다::"

#: ../../usage/restructuredtext/domains.rst:380
msgid "Cross-referencing Python objects"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:382
msgid ""
"The following roles refer to objects in modules and are possibly hyperlinked "
"if a matching identifier is found:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:387
msgid ""
"Reference a module; a dotted name may be used.  This should also be used for "
"package names."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:392
msgid ""
"Reference a Python function; dotted names may be used.  The role text needs "
"not include trailing parentheses to enhance readability; they will be added "
"automatically by Sphinx if the :confval:`add_function_parentheses` config "
"value is ``True`` (the default)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:399
msgid "Reference a module-level variable."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:403
msgid ""
"Reference a \"defined\" constant.  This may be a Python variable that is not "
"intended to be changed."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:408
msgid "Reference a class; a dotted name may be used."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:412
msgid ""
"Reference a method of an object.  The role text can include the type name and "
"the method name; if it occurs within the description of a type, the type name "
"can be omitted.  A dotted name may be used."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:418
msgid "Reference a data attribute of an object."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:422
msgid "Reference an exception.  A dotted name may be used."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:426
msgid ""
"Reference an object of unspecified type.  Useful e.g. as the :confval:"
"`default_role`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:431
msgid ""
"The name enclosed in this markup can include a module name and/or a class "
"name. For example, ``:py:func:`filter``` could refer to a function named "
"``filter`` in the current module, or the built-in function of that name.  In "
"contrast, ``:py:func:`foo.filter``` clearly refers to the ``filter`` function "
"in the ``foo`` module."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:437
msgid ""
"Normally, names in these roles are searched first without any further "
"qualification, then with the current module name prepended, then with the "
"current module and class name (if any) prepended.  If you prefix the name "
"with a dot, this order is reversed.  For example, in the documentation of "
"Python's :mod:`codecs` module, ``:py:func:`open``` always refers to the built-"
"in function, while ``:py:func:`.open``` refers to :func:`codecs.open`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:444
msgid ""
"A similar heuristic is used to determine whether the name is an attribute of "
"the currently documented class."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:447
msgid ""
"Also, if the name is prefixed with a dot, and no exact match is found, the "
"target is taken as a suffix and all object names with that suffix are "
"searched. For example, ``:py:meth:`.TarFile.close``` references the ``tarfile."
"TarFile.close()`` function, even if the current module is not ``tarfile``.  "
"Since this can get ambiguous, if there is more than one possible match, you "
"will get a warning from Sphinx."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:454
msgid ""
"Note that you can combine the ``~`` and ``.`` prefixes: ``:py:meth:`~.TarFile."
"close``` will reference the ``tarfile.TarFile.close()`` method, but the "
"visible link caption will only be ``close()``."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:462
msgid "The C Domain"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:464
msgid "The C domain (name **c**) is suited for documentation of C API."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:468
msgid "Describes a C function. The signature should be given as in C, e.g.::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:472
msgid ""
"This is also used to describe function-like preprocessor macros.  The names "
"of the arguments should be given so they may be used in the description."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:475
msgid ""
"Note that you don't have to backslash-escape asterisks in the signature, as "
"it is not parsed by the reST inliner."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:480
msgid "Describes a C struct member. Example signature::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:484
msgid ""
"The text of the description should include the range of values allowed, how "
"the value should be interpreted, and whether the value can be changed. "
"References to structure members in text should use the ``member`` role."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:490
msgid ""
"Describes a \"simple\" C macro.  Simple macros are macros which are used for "
"code expansion, but which do not take arguments so cannot be described as "
"functions.  This is a simple C-language ``#define``.  Examples of its use in "
"the Python documentation include :c:macro:`PyObject_HEAD` and :c:macro:"
"`Py_BEGIN_ALLOW_THREADS`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:498
msgid ""
"Describes a C type (whether defined by a typedef or struct). The signature "
"should just be the type name."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:503
msgid ""
"Describes a global C variable.  The signature should include the type, such "
"as::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:511
msgid "Cross-referencing C constructs"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:513
msgid ""
"The following roles create cross-references to C-language constructs if they "
"are defined in the documentation:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:518
msgid "Reference a C-language function. Should include trailing parentheses."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:522
msgid "Reference a C-language member of a struct."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:526
msgid "Reference a \"simple\" C macro, as defined above."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:530
msgid "Reference a C-language type."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:534
msgid "Reference a C-language variable."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:540
msgid "The C++ Domain"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:542
msgid "The C++ domain (name **cpp**) supports documenting C++ projects."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:545
msgid "Directives"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:547
msgid ""
"The following directives are available. All declarations can start with a "
"visibility statement (``public``, ``private`` or ``protected``)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:552
msgid ""
"Describe a class/struct, possibly with specification of inheritance, e.g.,::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:556
msgid "The class can be directly declared inside a nested scope, e.g.,::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:560
msgid "A class template can be declared::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:564
msgid "or with a line break::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:569
msgid "Full and partial template specialisations can be declared::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:579
msgid "Describe a function or member function, e.g.,::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:605
msgid "Function templates can also be described::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:610
msgid "and function template specialisations::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:618
msgid "Describe a variable or member variable, e.g.,::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:626
msgid "Variable templates can also be described::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:635
msgid ""
"Describe a type as in a typedef declaration, a type alias declaration, or "
"simply the name of a type with unspecified type, e.g.,::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:650
msgid "A type alias can also be templated::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:655
msgid "The example are rendered as follows."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:659
msgid "A typedef-like declaration of a type."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:663
msgid "Declaration of a type alias with unspecified type."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:667
msgid "Declaration of a type alias."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:676
msgid ""
"Describe a (scoped) enum, possibly with the underlying type specified.  Any "
"enumerators declared inside an unscoped enum will be declared both in the "
"enum scope and in the parent scope.  Examples::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:699
msgid "Describe an enumerator, optionally with its value defined, e.g.,::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:707
msgid "Describe a union."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:711
#: ../../usage/restructuredtext/domains.rst:800
msgid ""
"The support for concepts is experimental. It is based on the current draft "
"standard and the Concepts Technical Specification. The features may change as "
"they evolve."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:715
msgid ""
"Describe a concept. It must have exactly 1 template parameter list. The name "
"may be a nested name. Example::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:734
msgid "This will render as follows:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:738
msgid ""
"Proxy to an element of a notional sequence that can be compared, indirected, "
"or incremented."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:741
msgid "**Notation**"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:745
msgid "An lvalue."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:747
msgid "**Valid Expressions**"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:749
msgid ":cpp:expr:`*r`, when :cpp:expr:`r` is dereferenceable."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:750
msgid ""
":cpp:expr:`++r`, with return type :cpp:expr:`It&`, when :cpp:expr:`r` is "
"incrementable."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:754
msgid "Options"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:756
msgid "Some directives support options:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:758
msgid "``:noindex:``, see :ref:`basic-domain-markup`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:759
msgid ""
"``:tparam-line-spec:``, for templated declarations. If specified, each "
"template parameter will be rendered on a separate line."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:763
msgid "Anonymous Entities"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:765
msgid ""
"C++ supposrts anonymous namespaces, classes, enums, and unions. For the sake "
"of documentation they must be given some name that starts with ``@``, e.g., "
"``@42`` or ``@data``. These names can also be used in cross-references and "
"(type) expressions, though nested symbols will be found even when omitted. "
"The ``@...`` name will always be rendered as **[anonymous]** (possibly as a "
"link)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:772
msgid "Example::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:784
msgid "This will be rendered as:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:794
msgid ""
"Explicit ref: :cpp:var:`Data::@data::a`. Short-hand ref: :cpp:var:`Data::a`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:798
msgid "Constrained Templates"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:804
msgid "Sphinx does not currently support ``requires`` clauses."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:807
msgid "Placeholders"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:809
msgid ""
"Declarations may use the name of a concept to introduce constrained template "
"parameters, or the keyword ``auto`` to introduce unconstrained template "
"parameters::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:823
msgid "Template Introductions"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:825
msgid ""
"Simple constrained function or class templates can be declared with a "
"`template introduction` instead of a template parameter list::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:838
msgid "They are rendered as follows."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:842
msgid ""
"A function template with a template parameter constrained to be an Iterator."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:846
msgid ""
"A class template with a template parameter constrained to be "
"LessThanComparable."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:849
msgid ""
"Note however that no checking is performed with respect to parameter "
"compatibility. E.g., ``Iterator{A, B, C}`` will be accepted as an "
"introduction even though it would not be valid C++."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:854
msgid "Inline Expressions and Types"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:859
msgid ""
"Insert a C++ expression or type either as inline code (``cpp:expr``) or "
"inline text (``cpp:texpr``). For example::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:871
msgid "will be rendered as follows:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:877
msgid "An expression: :cpp:expr:`a * f(a)` (or as text: :cpp:texpr:`a * f(a)`)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:879
msgid ""
"A type: :cpp:expr:`const MySortedContainer<int>&` (or as text :cpp:texpr:"
"`const MySortedContainer<int>&`)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:884
msgid "Namespacing"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:886
msgid ""
"Declarations in the C++ domain are as default placed in global scope.  The "
"current scope can be changed using three namespace directives.  They manage a "
"stack declarations where ``cpp:namespace`` resets the stack and changes a "
"given scope."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:891
msgid ""
"The ``cpp:namespace-push`` directive changes the scope to a given inner scope "
"of the current one."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:894
msgid ""
"The ``cpp:namespace-pop`` directive undoes the most recent ``cpp:namespace-"
"push`` directive."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:899
msgid ""
"Changes the current scope for the subsequent objects to the given scope, and "
"resets the namespace directive stack.  Note that the namespace does not need "
"to correspond to C++ namespaces, but can end in names of classes, e.g.,::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:905
msgid ""
"All subsequent objects will be defined as if their name were declared with "
"the scope prepended. The subsequent cross-references will be searched for "
"starting in the current scope."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:909
msgid ""
"Using ``NULL``, ``0``, or ``nullptr`` as the scope will change to global "
"scope."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:912
msgid "A namespace declaration can also be templated, e.g.,::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:921
msgid ""
"declares ``size`` as a member function of the class template ``std::"
"vector``.  Equivalently this could have been declared using::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:929
msgid "or::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:936
msgid "Change the scope relatively to the current scope. For example, after::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:942
msgid "the current scope will be ``A::B::C::D``."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:946
msgid ""
"Undo the previous ``cpp:namespace-push`` directive (*not* just pop a scope). "
"For example, after::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:955
msgid "the current scope will be ``A::B`` (*not* ``A::B::C``)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:957
msgid ""
"If no previous ``cpp:namespace-push`` directive has been used, but only a "
"``cpp:namespace`` directive, then the current scope will be reset to global "
"scope.  That is, ``.. cpp:namespace:: A::B`` is equivalent to::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:968
msgid ""
"The C++ directives support the following info fields (see also :ref:`info-"
"field-lists`):"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:971
msgid "`param`, `parameter`, `arg`, `argument`: Description of a parameter."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:972
msgid "`tparam`: Description of a template parameter."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:973
msgid "`returns`, `return`: Description of a return value."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:974
msgid ""
"`throws`, `throw`, `exception`: Description of a possibly thrown exception."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:979
msgid "Cross-referencing"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:981
msgid "These roles link to the given declaration types:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:993
msgid ""
"Reference a C++ declaration by name (see below for details).  The name must "
"be properly qualified relative to the position of the link."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:996
msgid "Note on References with Templates Parameters/Arguments"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:998
msgid ""
"These roles follow the Sphinx :ref:`xref-syntax` rules. This means care must "
"be taken when referencing a (partial) template specialization, e.g. if the "
"link looks like this: ``:cpp:class:`MyClass<int>```. This is interpreted as a "
"link to ``int`` with a title of ``MyClass``. In this case, escape the opening "
"angle bracket with a backslash, like this: ``:cpp:class:`MyClass\\<int>```."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1005
msgid ""
"When a custom title is not needed it may be useful to use the roles for "
"inline expressions, :rst:role:`cpp:expr` and :rst:role:`cpp:texpr`, where "
"angle brackets do not need escaping."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1009
msgid "Declarations without template parameters and template arguments"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1011
msgid ""
"For linking to non-templated declarations the name must be a nested name, e."
"g., ``f`` or ``MyClass::f``."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1016
msgid "Overloaded (member) functions"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1018
msgid ""
"When a (member) function is referenced using just its name, the reference "
"will point to an arbitrary matching overload. The :rst:role:`cpp:any` and :"
"rst:role:`cpp:func` roles will an alternative format, which simply is a "
"complete function declaration. This will resolve to the exact matching "
"overload. As example, consider the following class declaration:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1033
msgid "References using the :rst:role:`cpp:func` role:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1035
msgid "Arbitrary overload: ``C::f``, :cpp:func:`C::f`"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1036
msgid "Also arbitrary overload: ``C::f()``, :cpp:func:`C::f()`"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1037
msgid "Specific overload: ``void C::f()``, :cpp:func:`void C::f()`"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1038
msgid "Specific overload: ``void C::f(int)``, :cpp:func:`void C::f(int)`"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1039
msgid "Specific overload: ``void C::f(double)``, :cpp:func:`void C::f(double)`"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1040
msgid ""
"Specific overload: ``void C::f(double) const``, :cpp:func:`void C::f(double) "
"const`"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1042
msgid ""
"Note that the :confval:`add_function_parentheses` configuration variable does "
"not influence specific overload references."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1049
msgid "Templated declarations"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1051
#: ../../usage/restructuredtext/domains.rst:1087
msgid "Assume the following declarations."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1061
msgid ""
"In general the reference must include the template parameter declarations, "
"and template arguments for the prefix of qualified names. For example:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1064
msgid ""
"``template\\<typename TOuter> Wrapper::Outer`` (:cpp:class:`template"
"\\<typename TOuter> Wrapper::Outer`)"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1066
msgid ""
"``template\\<typename TOuter> template\\<typename TInner> Wrapper::"
"Outer<TOuter>::Inner`` (:cpp:class:`template\\<typename TOuter> template"
"\\<typename TInner> Wrapper::Outer<TOuter>::Inner`)"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1069
msgid ""
"Currently the lookup only succeed if the template parameter identifiers are "
"equal strings. That is, ``template\\<typename UOuter> Wrapper::Outer`` will "
"not work."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1072
msgid ""
"As a shorthand notation, if a template parameter list is omitted, then the "
"lookup will assume either a primary template or a non-template, but not a "
"partial template specialisation. This means the following references work as "
"well:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1077
msgid "``Wrapper::Outer`` (:cpp:class:`Wrapper::Outer`)"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1079
msgid "``Wrapper::Outer::Inner`` (:cpp:class:`Wrapper::Outer::Inner`)"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1081
msgid ""
"``template\\<typename TInner> Wrapper::Outer::Inner`` (:cpp:class:`template"
"\\<typename TInner> Wrapper::Outer::Inner`)"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1085
msgid "(Full) Template Specialisations"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1104
msgid ""
"In general the reference must include a template parameter list for each "
"template argument list.  The full specialisation above can therefore be "
"referenced with ``template\\<> Outer\\<int>`` (:cpp:class:`template\\<> Outer"
"\\<int>`) and ``template\\<> template\\<> Outer\\<int>::Inner\\<bool>`` (:cpp:"
"class:`template\\<> template\\<> Outer\\<int>::Inner\\<bool>`).  As a "
"shorthand the empty template parameter list can be omitted, e.g., ``Outer"
"\\<int>`` (:cpp:class:`Outer\\<int>`) and ``Outer\\<int>::Inner\\<bool>`` (:"
"cpp:class:`Outer\\<int>::Inner\\<bool>`)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1114
msgid "Partial Template Specialisations"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1116
msgid "Assume the following declaration."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1121
msgid ""
"References to partial specialisations must always include the template "
"parameter lists, e.g., ``template\\<typename T> Outer\\<T*>`` (:cpp:class:"
"`template\\<typename T> Outer\\<T*>`).  Currently the lookup only succeed if "
"the template parameter identifiers are equal strings."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1127
msgid "Configuration Variables"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1129
msgid "See :ref:`cpp-config`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1133
msgid "The Standard Domain"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1135
msgid ""
"The so-called \"standard\" domain collects all markup that doesn't warrant a "
"domain of its own.  Its directives and roles are not prefixed with a domain "
"name."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1139
msgid ""
"The standard domain is also where custom object descriptions, added using "
"the :func:`~sphinx.application.Sphinx.add_object_type` API, are placed."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1142
msgid "There is a set of directives allowing documenting command-line programs:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1146
msgid ""
"Describes a command line argument or switch.  Option argument names should be "
"enclosed in angle brackets.  Examples::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1157
msgid ""
"The directive will create cross-reference targets for the given options, "
"referencable by :rst:role:`option` (in the example case, you'd use something "
"like ``:option:`dest_dir```, ``:option:`-m```, or ``:option:`--module```)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1161
msgid ""
"``cmdoption`` directive is a deprecated alias for the ``option`` directive."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1165
msgid ""
"Describes an environment variable that the documented code or program uses or "
"defines.  Referencable by :rst:role:`envvar`."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1170
msgid ""
"Like :rst:dir:`py:currentmodule`, this directive produces no output. Instead, "
"it serves to notify Sphinx that all following :rst:dir:`option` directives "
"document options for the program called *name*."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1174
msgid ""
"If you use :rst:dir:`program`, you have to qualify the references in your :"
"rst:role:`option` roles by the program name, so if you have the following "
"situation ::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1190
msgid ""
"then ``:option:`rm -r``` would refer to the first option, while ``:option:"
"`svn -r``` would refer to the second one."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1193
msgid ""
"The program name may contain spaces (in case you want to document subcommands "
"like ``svn add`` and ``svn commit`` separately)."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1198
msgid ""
"There is also a very generic object description directive, which is not tied "
"to any domain:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1204
msgid ""
"This directive produces the same formatting as the specific ones provided by "
"domains, but does not create index entries or cross-referencing targets. "
"Example::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1214
msgid "The JavaScript Domain"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1216
msgid "The JavaScript domain (name **js**) provides the following directives:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1220
msgid ""
"This directive sets the module name for object declarations that follow "
"after. The module name is used in the global module index and in cross "
"references. This directive does not create an object heading like :rst:dir:"
"`py:class` would, for example."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1225
msgid ""
"By default, this directive will create a linkable entity and will cause an "
"entry in the global module index, unless the ``noindex`` option is "
"specified.  If this option is specified, the directive will only update the "
"current module name."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1230
msgid "To clear the current module, set the module name to ``null`` or ``None``"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1236
msgid ""
"Describes a JavaScript function or method.  If you want to describe arguments "
"as optional use square brackets as :ref:`documented <signatures>` for Python "
"signatures."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1240
msgid ""
"You can use fields to give more details about arguments and their expected "
"types, errors which may be thrown by the function, and the value being "
"returned::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1254
#: ../../usage/restructuredtext/domains.rst:1283
msgid "This is rendered as:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst
msgid "Arguments"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1258
msgid "An URI to the location of the resource."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1259
msgid "Gets called with the object."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1260
msgid ""
"Gets called in case the request fails. And a lot of other text so we need "
"multiple lines."
msgstr ""

#: ../../usage/restructuredtext/domains.rst
msgid "Throws"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1263
msgid "For whatever reason in that case."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1264
msgid "Something."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1268
msgid ""
"This directive is an alias for :rst:dir:`js:function`, however it describes a "
"function that is implemented as a method on a class object."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1275
msgid ""
"Describes a constructor that creates an object.  This is basically like a "
"function but will show up with a `class` prefix::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1287
msgid "The name of the animal"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1288
msgid "an optional age for the animal"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1292
msgid "Describes a global variable or constant."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1296
msgid "Describes the attribute *name* of *object*."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1300
#: ../../usage/restructuredtext/domains.rst:1355
msgid "These roles are provided to refer to the described objects:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1311
msgid "The reStructuredText domain"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1313
msgid ""
"The reStructuredText domain (name **rst**) provides the following directives:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1317
msgid ""
"Describes a reST directive.  The *name* can be a single directive name or "
"actual directive syntax (`..` prefix and `::` suffix) with arguments that "
"will be rendered differently.  For example::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1329
#: ../../usage/restructuredtext/domains.rst:1347
msgid "will be rendered as:"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1333
#: ../../usage/restructuredtext/domains.rst:1351
msgid "Foo description."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1337
msgid "Bar description."
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1341
msgid "Describes a reST role.  For example::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1363
msgid "The Math Domain"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1365
msgid "The math domain (name **math**) provides the following roles::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1369
msgid ""
"Role for cross-referencing equations defined by :rst:dir:`math` directive via "
"their label.  Example::"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1381
msgid "More domains"
msgstr ""

#: ../../usage/restructuredtext/domains.rst:1383
msgid ""
"The sphinx-contrib_ repository contains more domains available as extensions; "
"currently Ada_, CoffeeScript_, Erlang_, HTTP_, Lasso_, MATLAB_, PHP_, and "
"Ruby_ domains. Also available are domains for `Chapel`_, `Common Lisp`_, "
"dqn_, Go_, Jinja_, Operation_, and Scala_."
msgstr ""
