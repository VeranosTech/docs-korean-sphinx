# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2017, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.7+/637a0962\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-09-18 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../rest.rst:6
msgid "reStructuredText Primer"
msgstr ""

#: ../../rest.rst:8
msgid ""
"This section is a brief introduction to reStructuredText (reST) concepts "
"and syntax, intended to provide authors with enough information to author"
" documents productively.  Since reST was designed to be a simple, "
"unobtrusive markup language, this will not take too long."
msgstr ""

#: ../../rest.rst:15
msgid ""
"The authoritative `reStructuredText User Documentation "
"<http://docutils.sourceforge.net/rst.html>`_.  The \"ref\" links in this "
"document link to the description of the individual constructs in the reST"
" reference."
msgstr ""

#: ../../rest.rst:22
msgid "Paragraphs"
msgstr ""

#: ../../rest.rst:24
msgid ""
"The paragraph (:duref:`ref <paragraphs>`) is the most basic block in a "
"reST document.  Paragraphs are simply chunks of text separated by one or "
"more blank lines.  As in Python, indentation is significant in reST, so "
"all lines of the same paragraph must be left-aligned to the same level of"
" indentation."
msgstr ""

#: ../../rest.rst:33
msgid "Inline markup"
msgstr ""

#: ../../rest.rst:35
msgid "The standard reST inline markup is quite simple: use"
msgstr ""

#: ../../rest.rst:37
msgid "one asterisk: ``*text*`` for emphasis (italics),"
msgstr ""

#: ../../rest.rst:38
msgid "two asterisks: ``**text**`` for strong emphasis (boldface), and"
msgstr ""

#: ../../rest.rst:39
msgid "backquotes: ````text```` for code samples."
msgstr ""

#: ../../rest.rst:41
msgid ""
"If asterisks or backquotes appear in running text and could be confused "
"with inline markup delimiters, they have to be escaped with a backslash."
msgstr ""

#: ../../rest.rst:44
msgid "Be aware of some restrictions of this markup:"
msgstr ""

#: ../../rest.rst:46
msgid "it may not be nested,"
msgstr ""

#: ../../rest.rst:47
msgid "content may not start or end with whitespace: ``* text*`` is wrong,"
msgstr ""

#: ../../rest.rst:48
msgid ""
"it must be separated from surrounding text by non-word characters.  Use a"
" backslash escaped space to work around that: ``thisis\\ *one*\\ word``."
msgstr ""

#: ../../rest.rst:51
msgid "These restrictions may be lifted in future versions of the docutils."
msgstr ""

#: ../../rest.rst:53
msgid ""
"reST also allows for custom \"interpreted text roles\", which signify "
"that the enclosed text should be interpreted in a specific way.  Sphinx "
"uses this to provide semantic markup and cross-referencing of "
"identifiers, as described in the appropriate section.  The general syntax"
" is ``:rolename:`content```."
msgstr ""

#: ../../rest.rst:58
msgid "Standard reST provides the following roles:"
msgstr ""

#: ../../rest.rst:60
msgid ":durole:`emphasis` -- alternate spelling for ``*emphasis*``"
msgstr ""

#: ../../rest.rst:61
msgid ":durole:`strong` -- alternate spelling for ``**strong**``"
msgstr ""

#: ../../rest.rst:62
msgid ":durole:`literal` -- alternate spelling for ````literal````"
msgstr ""

#: ../../rest.rst:63
msgid ":durole:`subscript` -- subscript text"
msgstr ""

#: ../../rest.rst:64
msgid ":durole:`superscript` -- superscript text"
msgstr ""

#: ../../rest.rst:65
msgid ""
":durole:`title-reference` -- for titles of books, periodicals, and other "
"materials"
msgstr ""

#: ../../rest.rst:68
msgid "See :ref:`inline-markup` for roles added by Sphinx."
msgstr ""

#: ../../rest.rst:72
msgid "Lists and Quote-like blocks"
msgstr ""

#: ../../rest.rst:74
msgid ""
"List markup (:duref:`ref <bullet-lists>`) is natural: just place an "
"asterisk at the start of a paragraph and indent properly.  The same goes "
"for numbered lists; they can also be autonumbered using a ``#`` sign::"
msgstr ""

#: ../../rest.rst:89
msgid ""
"Nested lists are possible, but be aware that they must be separated from "
"the parent list items by blank lines::"
msgstr ""

#: ../../rest.rst:100
msgid ""
"Definition lists (:duref:`ref <definition-lists>`) are created as "
"follows::"
msgstr ""

#: ../../rest.rst:110
msgid "Note that the term cannot have more than one line of text."
msgstr ""

#: ../../rest.rst:112
msgid ""
"Quoted paragraphs (:duref:`ref <block-quotes>`) are created by just "
"indenting them more than the surrounding paragraphs."
msgstr ""

#: ../../rest.rst:115
msgid ""
"Line blocks (:duref:`ref <line-blocks>`) are a way of preserving line "
"breaks::"
msgstr ""

#: ../../rest.rst:121
msgid "There are also several more special blocks available:"
msgstr ""

#: ../../rest.rst:123
msgid "field lists (:duref:`ref <field-lists>`)"
msgstr ""

#: ../../rest.rst:124
msgid "option lists (:duref:`ref <option-lists>`)"
msgstr ""

#: ../../rest.rst:125
msgid "quoted literal blocks (:duref:`ref <quoted-literal-blocks>`)"
msgstr ""

#: ../../rest.rst:126
msgid "doctest blocks (:duref:`ref <doctest-blocks>`)"
msgstr ""

#: ../../rest.rst:130
msgid "Source Code"
msgstr ""

#: ../../rest.rst:132
msgid ""
"Literal code blocks (:duref:`ref <literal-blocks>`) are introduced by "
"ending a paragraph with the special marker ``::``.  The literal block "
"must be indented (and, like all paragraphs, separated from the "
"surrounding ones by blank lines)::"
msgstr ""

#: ../../rest.rst:145
msgid "The handling of the ``::`` marker is smart:"
msgstr ""

#: ../../rest.rst:147
msgid ""
"If it occurs as a paragraph of its own, that paragraph is completely left"
" out of the document."
msgstr ""

#: ../../rest.rst:149
msgid "If it is preceded by whitespace, the marker is removed."
msgstr ""

#: ../../rest.rst:150
msgid ""
"If it is preceded by non-whitespace, the marker is replaced by a single "
"colon."
msgstr ""

#: ../../rest.rst:153
msgid ""
"That way, the second sentence in the above example's first paragraph "
"would be rendered as \"The next paragraph is a code sample:\"."
msgstr ""

#: ../../rest.rst:160
msgid "Tables"
msgstr ""

#: ../../rest.rst:162
msgid ""
"For *grid tables* (:duref:`ref <grid-tables>`), you have to \"paint\" the"
" cell grid yourself.  They look like this::"
msgstr ""

#: ../../rest.rst:175
msgid ""
"*Simple tables* (:duref:`ref <simple-tables>`) are easier to write, but "
"limited: they must contain more than one row, and the first column cells "
"cannot contain multiple lines.  They look like this::"
msgstr ""

#: ../../rest.rst:188
msgid ""
"Two more syntaxes are supported: *CSV tables* and *List tables*. They use"
" an *explicit markup block*, see `Directives`_ section."
msgstr ""

#: ../../rest.rst:192
msgid "Hyperlinks"
msgstr ""

#: ../../rest.rst:195
msgid "External links"
msgstr ""

#: ../../rest.rst:197
msgid ""
"Use ```Link text <http://example.com/>`_`` for inline web links.  If the "
"link text should be the web address, you don't need special markup at "
"all, the parser finds links and mail addresses in ordinary text."
msgstr ""

#: ../../rest.rst:201
msgid ""
"There must be a space between the link text and the opening \\< for the "
"URL."
msgstr ""

#: ../../rest.rst:203
msgid ""
"You can also separate the link and the target definition (:duref:`ref "
"<hyperlink-targets>`), like this::"
msgstr ""

#: ../../rest.rst:212
msgid "Internal links"
msgstr ""

#: ../../rest.rst:214
msgid ""
"Internal linking is done via a special reST role provided by Sphinx, see "
"the section on specific markup, :ref:`ref-role`."
msgstr ""

#: ../../rest.rst:219
msgid "Sections"
msgstr ""

#: ../../rest.rst:221
msgid ""
"Section headers (:duref:`ref <sections>`) are created by underlining (and"
" optionally overlining) the section title with a punctuation character, "
"at least as long as the text::"
msgstr ""

#: ../../rest.rst:229
msgid ""
"Normally, there are no heading levels assigned to certain characters as "
"the structure is determined from the succession of headings.  However, "
"this convention is used in `Python's Style Guide for documenting "
"<https://docs.python.org/devguide/documenting.html#style-guide>`_ which "
"you may follow:"
msgstr ""

#: ../../rest.rst:235
msgid "``#`` with overline, for parts"
msgstr ""

#: ../../rest.rst:236
msgid "``*`` with overline, for chapters"
msgstr ""

#: ../../rest.rst:237
msgid "``=``, for sections"
msgstr ""

#: ../../rest.rst:238
msgid "``-``, for subsections"
msgstr ""

#: ../../rest.rst:239
msgid "``^``, for subsubsections"
msgstr ""

#: ../../rest.rst:240
msgid "``\"``, for paragraphs"
msgstr ""

#: ../../rest.rst:242
msgid ""
"Of course, you are free to use your own marker characters (see the reST "
"documentation), and use a deeper nesting level, but keep in mind that "
"most target formats (HTML, LaTeX) have a limited supported nesting depth."
msgstr ""

#: ../../rest.rst:248
msgid "Explicit Markup"
msgstr ""

#: ../../rest.rst:250
msgid ""
"\"Explicit markup\" (:duref:`ref <explicit-markup-blocks>`) is used in "
"reST for most constructs that need special handling, such as footnotes, "
"specially-highlighted paragraphs, comments, and generic directives."
msgstr ""

#: ../../rest.rst:254
msgid ""
"An explicit markup block begins with a line starting with ``..`` followed"
" by whitespace and is terminated by the next paragraph at the same level "
"of indentation.  (There needs to be a blank line between explicit markup "
"and normal paragraphs.  This may all sound a bit complicated, but it is "
"intuitive enough when you write it.)"
msgstr ""

#: ../../rest.rst:264
msgid "Directives"
msgstr ""

#: ../../rest.rst:266
msgid ""
"A directive (:duref:`ref <directives>`) is a generic block of explicit "
"markup. Besides roles, it is one of the extension mechanisms of reST, and"
" Sphinx makes heavy use of it."
msgstr ""

#: ../../rest.rst:270
msgid "Docutils supports the following directives:"
msgstr ""

#: ../../rest.rst:272
msgid ""
"Admonitions: :dudir:`attention`, :dudir:`caution`, :dudir:`danger`, "
":dudir:`error`, :dudir:`hint`, :dudir:`important`, :dudir:`note`, "
":dudir:`tip`, :dudir:`warning` and the generic :dudir:`admonition "
"<admonitions>`.  (Most themes style only \"note\" and \"warning\" "
"specially.)"
msgstr ""

#: ../../rest.rst:278
msgid "Images:"
msgstr ""

#: ../../rest.rst:280
msgid ":dudir:`image` (see also Images_ below)"
msgstr ""

#: ../../rest.rst:281
msgid ":dudir:`figure` (an image with caption and optional legend)"
msgstr ""

#: ../../rest.rst:283
msgid "Additional body elements:"
msgstr ""

#: ../../rest.rst:285
msgid ""
":dudir:`contents <table-of-contents>` (a local, i.e. for the current file"
" only, table of contents)"
msgstr ""

#: ../../rest.rst:287
msgid ""
":dudir:`container` (a container with a custom class, useful to generate "
"an outer ``<div>`` in HTML)"
msgstr ""

#: ../../rest.rst:289
msgid ":dudir:`rubric` (a heading without relation to the document sectioning)"
msgstr ""

#: ../../rest.rst:290
msgid ":dudir:`topic`, :dudir:`sidebar` (special highlighted body elements)"
msgstr ""

#: ../../rest.rst:291
msgid ":dudir:`parsed-literal` (literal block that supports inline markup)"
msgstr ""

#: ../../rest.rst:292
msgid ":dudir:`epigraph` (a block quote with optional attribution line)"
msgstr ""

#: ../../rest.rst:293
msgid ""
":dudir:`highlights`, :dudir:`pull-quote` (block quotes with their own "
"class attribute)"
msgstr ""

#: ../../rest.rst:295
msgid ":dudir:`compound <compound-paragraph>` (a compound paragraph)"
msgstr ""

#: ../../rest.rst:297
msgid "Special tables:"
msgstr ""

#: ../../rest.rst:299
msgid ":dudir:`table` (a table with title)"
msgstr ""

#: ../../rest.rst:300
msgid ":dudir:`csv-table` (a table generated from comma-separated values)"
msgstr ""

#: ../../rest.rst:301
msgid ":dudir:`list-table` (a table generated from a list of lists)"
msgstr ""

#: ../../rest.rst:303
msgid "Special directives:"
msgstr ""

#: ../../rest.rst:305
msgid ":dudir:`raw <raw-data-pass-through>` (include raw target-format markup)"
msgstr ""

#: ../../rest.rst:306
msgid ""
":dudir:`include` (include reStructuredText from another file) -- in "
"Sphinx, when given an absolute include file path, this directive takes it"
" as relative to the source directory"
msgstr ""

#: ../../rest.rst:309
msgid ":dudir:`class` (assign a class attribute to the next element) [1]_"
msgstr ""

#: ../../rest.rst:311
msgid "HTML specifics:"
msgstr ""

#: ../../rest.rst:313
msgid ":dudir:`meta` (generation of HTML ``<meta>`` tags)"
msgstr ""

#: ../../rest.rst:314
msgid ":dudir:`title <metadata-document-title>` (override document title)"
msgstr ""

#: ../../rest.rst:316
msgid "Influencing markup:"
msgstr ""

#: ../../rest.rst:318
msgid ":dudir:`default-role` (set a new default role)"
msgstr ""

#: ../../rest.rst:319
msgid ":dudir:`role` (create a new role)"
msgstr ""

#: ../../rest.rst:321
msgid ""
"Since these are only per-file, better use Sphinx's facilities for setting"
" the :confval:`default_role`."
msgstr ""

#: ../../rest.rst:324
msgid ""
"Do *not* use the directives :dudir:`sectnum`, :dudir:`header` and "
":dudir:`footer`."
msgstr ""

#: ../../rest.rst:327
msgid "Directives added by Sphinx are described in :ref:`sphinxmarkup`."
msgstr ""

#: ../../rest.rst:329
msgid ""
"Basically, a directive consists of a name, arguments, options and "
"content. (Keep this terminology in mind, it is used in the next chapter "
"describing custom directives.)  Looking at this example, ::"
msgstr ""

#: ../../rest.rst:339
msgid ""
"``function`` is the directive name.  It is given two arguments here, the "
"remainder of the first line and the second line, as well as one option "
"``module`` (as you can see, options are given in the lines immediately "
"following the arguments and indicated by the colons).  Options must be "
"indented to the same level as the directive content."
msgstr ""

#: ../../rest.rst:345
msgid ""
"The directive content follows after a blank line and is indented relative"
" to the directive start."
msgstr ""

#: ../../rest.rst:350
msgid "Images"
msgstr ""

#: ../../rest.rst:352
msgid "reST supports an image directive (:dudir:`ref <image>`), used like so::"
msgstr ""

#: ../../rest.rst:357
msgid ""
"When used within Sphinx, the file name given (here ``gnu.png``) must "
"either be relative to the source file, or absolute which means that they "
"are relative to the top source directory.  For example, the file "
"``sketch/spam.rst`` could refer to the image ``images/spam.png`` as "
"``../images/spam.png`` or ``/images/spam.png``."
msgstr ""

#: ../../rest.rst:363
msgid ""
"Sphinx will automatically copy image files over to a subdirectory of the "
"output directory on building (e.g. the ``_static`` directory for HTML "
"output.)"
msgstr ""

#: ../../rest.rst:366
msgid ""
"Interpretation of image size options (``width`` and ``height``) is as "
"follows: if the size has no unit or the unit is pixels, the given size "
"will only be respected for output channels that support pixels. Other "
"units (like ``pt`` for points) will be used for HTML and LaTeX output "
"(the latter replaces ``pt`` by ``bp`` as this is the TeX unit such that "
"``72bp=1in``)."
msgstr ""

#: ../../rest.rst:372
msgid ""
"Sphinx extends the standard docutils behavior by allowing an asterisk for"
" the extension::"
msgstr ""

#: ../../rest.rst:377
msgid ""
"Sphinx then searches for all images matching the provided pattern and "
"determines their type.  Each builder then chooses the best image out of "
"these candidates. For instance, if the file name ``gnu.*`` was given and "
"two files :file:`gnu.pdf` and :file:`gnu.png` existed in the source tree,"
" the LaTeX builder would choose the former, while the HTML builder would "
"prefer the latter. Supported image types and choosing priority are "
"defined at :ref:`builders`."
msgstr ""

#: ../../rest.rst:384
msgid "Note that image file names should not contain spaces."
msgstr ""

#: ../../rest.rst:386
msgid "Added the support for file names ending in an asterisk."
msgstr ""

#: ../../rest.rst:389
msgid "Image paths can now be absolute."
msgstr ""

#: ../../rest.rst:392
msgid "latex target supports pixels (default is ``96px=1in``)."
msgstr ""

#: ../../rest.rst:397 ../../rest.rst:497
msgid "Footnotes"
msgstr ""

#: ../../rest.rst:399
msgid ""
"For footnotes (:duref:`ref <footnotes>`), use ``[#name]_`` to mark the "
"footnote location, and add the footnote body at the bottom of the "
"document after a \"Footnotes\" rubric heading, like so::"
msgstr ""

#: ../../rest.rst:410
msgid ""
"You can also explicitly number the footnotes (``[1]_``) or use auto-"
"numbered footnotes without names (``[#]_``)."
msgstr ""

#: ../../rest.rst:415
msgid "Citations"
msgstr ""

#: ../../rest.rst:417
msgid ""
"Standard reST citations (:duref:`ref <citations>`) are supported, with "
"the additional feature that they are \"global\", i.e. all citations can "
"be referenced from all files.  Use them like so::"
msgstr ""

#: ../../rest.rst:425
msgid ""
"Citation usage is similar to footnote usage, but with a label that is not"
" numeric or begins with ``#``."
msgstr ""

#: ../../rest.rst:430
msgid "Substitutions"
msgstr ""

#: ../../rest.rst:432
msgid ""
"reST supports \"substitutions\" (:duref:`ref <substitution-"
"definitions>`), which are pieces of text and/or markup referred to in the"
" text by ``|name|``.  They are defined like footnotes with explicit "
"markup blocks, like this::"
msgstr ""

#: ../../rest.rst:438
msgid "or this::"
msgstr ""

#: ../../rest.rst:443
msgid ""
"See the :duref:`reST reference for substitutions <substitution-"
"definitions>` for details."
msgstr ""

#: ../../rest.rst:446
msgid ""
"If you want to use some substitutions for all documents, put them into "
":confval:`rst_prolog` or put them into a separate file and include it "
"into all documents you want to use them in, using the :rst:dir:`include` "
"directive.  (Be sure to give the include file a file name extension "
"differing from that of other source files, to avoid Sphinx finding it as "
"a standalone document.)"
msgstr ""

#: ../../rest.rst:452
msgid ""
"Sphinx defines some default substitutions, see :ref:`default-"
"substitutions`."
msgstr ""

#: ../../rest.rst:456
msgid "Comments"
msgstr ""

#: ../../rest.rst:458
msgid ""
"Every explicit markup block which isn't a valid markup construct (like "
"the footnotes above) is regarded as a comment (:duref:`ref <comments>`)."
"  For example::"
msgstr ""

#: ../../rest.rst:464
msgid "You can indent text after a comment start to form multiline comments::"
msgstr ""

#: ../../rest.rst:474
msgid "Source encoding"
msgstr ""

#: ../../rest.rst:476
msgid ""
"Since the easiest way to include special characters like em dashes or "
"copyright signs in reST is to directly write them as Unicode characters, "
"one has to specify an encoding.  Sphinx assumes source files to be "
"encoded in UTF-8 by default; you can change this with the "
":confval:`source_encoding` config value."
msgstr ""

#: ../../rest.rst:483
msgid "Gotchas"
msgstr ""

#: ../../rest.rst:485
msgid ""
"There are some problems one commonly runs into while authoring reST "
"documents:"
msgstr ""

#: ../../rest.rst:487
msgid ""
"**Separation of inline markup:** As said above, inline markup spans must "
"be separated from the surrounding text by non-word characters, you have "
"to use a backslash-escaped space to get around that.  See :duref:`the "
"reference <substitution-definitions>` for the details."
msgstr ""

#: ../../rest.rst:492
msgid ""
"**No nested inline markup:** Something like ``*see :func:`foo`*`` is not "
"possible."
msgstr ""

#: ../../rest.rst:498
msgid ""
"When the default domain contains a :rst:dir:`class` directive, this "
"directive will be shadowed.  Therefore, Sphinx re-exports it as :rst:dir"
":`rst-class`."
msgstr ""

