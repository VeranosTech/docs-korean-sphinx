# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2017, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.7+/637a0962\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-09-18 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../ext/doctest.rst:4
msgid ":mod:`sphinx.ext.doctest` -- Test snippets in the documentation"
msgstr ""

#: ../../ext/doctest.rst:14
msgid ""
"This extension allows you to test snippets in the documentation in a "
"natural way.  It works by collecting specially-marked up code blocks and "
"running them as doctest tests."
msgstr ""

#: ../../ext/doctest.rst:18
msgid ""
"Within one document, test code is partitioned in *groups*, where each "
"group consists of:"
msgstr ""

#: ../../ext/doctest.rst:21
msgid "zero or more *setup code* blocks (e.g. importing the module to test)"
msgstr ""

#: ../../ext/doctest.rst:22
msgid "one or more *test* blocks"
msgstr ""

#: ../../ext/doctest.rst:24
msgid ""
"When building the docs with the ``doctest`` builder, groups are collected"
" for each document and run one after the other, first executing setup "
"code blocks, then the test blocks in the order they appear in the file."
msgstr ""

#: ../../ext/doctest.rst:28
msgid "There are two kinds of test blocks:"
msgstr ""

#: ../../ext/doctest.rst:30
msgid ""
"*doctest-style* blocks mimic interactive sessions by interleaving Python "
"code (including the interpreter prompt) and output."
msgstr ""

#: ../../ext/doctest.rst:33
msgid ""
"*code-output-style* blocks consist of an ordinary piece of Python code, "
"and optionally, a piece of output for that code."
msgstr ""

#: ../../ext/doctest.rst:38
msgid "Directives"
msgstr ""

#: ../../ext/doctest.rst:40
msgid ""
"The *group* argument below is interpreted as follows: if it is empty, the"
" block is assigned to the group named ``default``.  If it is ``*``, the "
"block is assigned to all groups (including the ``default`` group).  "
"Otherwise, it must be a comma-separated list of group names."
msgstr ""

#: ../../ext/doctest.rst:47
msgid ""
"A setup code block.  This code is not shown in the output for other "
"builders, but executed before the doctests of the group(s) it belongs to."
msgstr ""

#: ../../ext/doctest.rst:53
msgid ""
"A cleanup code block.  This code is not shown in the output for other "
"builders, but executed after the doctests of the group(s) it belongs to."
msgstr ""

#: ../../ext/doctest.rst:61
msgid ""
"A doctest-style code block.  You can use standard :mod:`doctest` flags "
"for controlling how actual output is compared with what you give as "
"output.  The default set of flags is specified by the "
":confval:`doctest_default_flags` configuration variable."
msgstr ""

#: ../../ext/doctest.rst:66
msgid "This directive supports three options:"
msgstr ""

#: ../../ext/doctest.rst:68
msgid ""
"``hide``, a flag option, hides the doctest block in other builders.  By "
"default it is shown as a highlighted doctest block."
msgstr ""

#: ../../ext/doctest.rst:71
msgid ""
"``options``, a string option, can be used to give a comma-separated list "
"of doctest flags that apply to each example in the tests.  (You still can"
" give explicit flags per example, with doctest comments, but they will "
"show up in other builders too.)"
msgstr ""

#: ../../ext/doctest.rst:76
msgid ""
"``pyversion``, a string option, can be used to specify the required "
"Python version for the example to be tested. For instance, in the "
"following case the example will be tested only for Python versions "
"greather than 3.3::"
msgstr ""

#: ../../ext/doctest.rst:83
msgid ""
"The supported operands are ``<``, ``<=``, ``==``, ``>=``, ``>``, and "
"comparison is performed by `distutils.version.LooseVersion "
"<https://www.python.org/dev/peps/pep-0386/#distutils>`__."
msgstr ""

#: ../../ext/doctest.rst:89
msgid ""
"Note that like with standard doctests, you have to use ``<BLANKLINE>`` to"
" signal a blank line in the expected output.  The ``<BLANKLINE>`` is "
"removed when building presentation output (HTML, LaTeX etc.)."
msgstr ""

#: ../../ext/doctest.rst:93
msgid "Also, you can give inline doctest options, like in doctest::"
msgstr ""

#: ../../ext/doctest.rst:98
msgid ""
"They will be respected when the test is run, but stripped from "
"presentation output."
msgstr ""

#: ../../ext/doctest.rst:104
msgid "A code block for a code-output-style test."
msgstr ""

#: ../../ext/doctest.rst:106
msgid "This directive supports one option:"
msgstr ""

#: ../../ext/doctest.rst:108
msgid ""
"``hide``, a flag option, hides the code block in other builders.  By "
"default it is shown as a highlighted code block."
msgstr ""

#: ../../ext/doctest.rst:113
msgid ""
"Code in a ``testcode`` block is always executed all at once, no matter "
"how many statements it contains.  Therefore, output will *not* be "
"generated for bare expressions -- use ``print``.  Example::"
msgstr ""

#: ../../ext/doctest.rst:126
msgid ""
"Also, please be aware that since the doctest module does not support "
"mixing regular output and an exception message in the same snippet, this "
"applies to testcode/testoutput as well."
msgstr ""

#: ../../ext/doctest.rst:133
msgid ""
"The corresponding output, or the exception message, for the last "
":rst:dir:`testcode` block."
msgstr ""

#: ../../ext/doctest.rst:136
msgid "This directive supports two options:"
msgstr ""

#: ../../ext/doctest.rst:138
msgid ""
"``hide``, a flag option, hides the output block in other builders.  By "
"default it is shown as a literal block without highlighting."
msgstr ""

#: ../../ext/doctest.rst:141
msgid ""
"``options``, a string option, can be used to give doctest flags (comma-"
"separated) just like in normal doctest blocks."
msgstr ""

#: ../../ext/doctest.rst:144
msgid "Example::"
msgstr ""

#: ../../ext/doctest.rst:157
msgid ""
"The following is an example for the usage of the directives.  The test "
"via :rst:dir:`doctest` and the test via :rst:dir:`testcode` and "
":rst:dir:`testoutput` are equivalent. ::"
msgstr ""

#: ../../ext/doctest.rst:191
msgid "Configuration"
msgstr ""

#: ../../ext/doctest.rst:193
msgid "The doctest extension uses the following configuration values:"
msgstr ""

#: ../../ext/doctest.rst:197
msgid "By default, these options are enabled:"
msgstr ""

#: ../../ext/doctest.rst:199
msgid ""
"``ELLIPSIS``, allowing you to put ellipses in the expected output that "
"match anything in the actual output;"
msgstr ""

#: ../../ext/doctest.rst:201
msgid ""
"``IGNORE_EXCEPTION_DETAIL``, causing everything following the leftmost "
"colon and any module information in the exception name to be ignored;"
msgstr ""

#: ../../ext/doctest.rst:203
msgid ""
"``DONT_ACCEPT_TRUE_FOR_1``, rejecting \"True\" in the output where \"1\" "
"is given -- the default behavior of accepting this substitution is a "
"relic of pre-Python 2.2 times."
msgstr ""

#: ../../ext/doctest.rst:211
msgid ""
"A list of directories that will be added to :data:`sys.path` when the "
"doctest builder is used.  (Make sure it contains absolute paths.)"
msgstr ""

#: ../../ext/doctest.rst:216
msgid ""
"Python code that is treated like it were put in a ``testsetup`` directive"
" for *every* file that is tested, and for every group.  You can use this "
"to e.g. import modules you will always need in your doctests."
msgstr ""

#: ../../ext/doctest.rst:224
msgid ""
"Python code that is treated like it were put in a ``testcleanup`` "
"directive for *every* file that is tested, and for every group.  You can "
"use this to e.g. remove any temporary files that the tests leave behind."
msgstr ""

#: ../../ext/doctest.rst:232
msgid ""
"If this is a nonempty string (the default is ``'default'``), standard "
"reST doctest blocks will be tested too.  They will be assigned to the "
"group name given."
msgstr ""

#: ../../ext/doctest.rst:236
msgid ""
"reST doctest blocks are simply doctests put into a paragraph of their "
"own, like so::"
msgstr ""

#: ../../ext/doctest.rst:246
msgid ""
"(Note that no special ``::`` is used to introduce a doctest block; "
"docutils recognizes them from the leading ``>>>``.  Also, no additional "
"indentation is used, though it doesn't hurt.)"
msgstr ""

#: ../../ext/doctest.rst:250
msgid ""
"If this value is left at its default value, the above snippet is "
"interpreted by the doctest builder exactly like the following::"
msgstr ""

#: ../../ext/doctest.rst:262
msgid ""
"This feature makes it easy for you to test doctests in docstrings "
"included with the :mod:`~sphinx.ext.autodoc` extension without marking "
"them up with a special directive."
msgstr ""

#: ../../ext/doctest.rst:266
msgid ""
"Note though that you can't have blank lines in reST doctest blocks.  They"
" will be interpreted as one block ending and another one starting.  Also,"
" removal of ``<BLANKLINE>`` and ``# doctest:`` options only works in "
":rst:dir:`doctest` blocks, though you may set "
":confval:`trim_doctest_flags` to achieve that in all code blocks with "
"Python console content."
msgstr ""

